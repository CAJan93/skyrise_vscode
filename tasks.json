{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "docker remove all UNTAGGED images",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "for img in $(docker image ls | grep \"<none>\" | awk '\"'\"'{ print $3 }'\"'\"' ) ; do docker image rm -f $img ; done"
      ]
    },
    {
      "label": "docker remove all STOPPED containers",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "docker rm $(docker ps -a -q)"
      ]
    },
    {
      "label": "check pragma once in all src/",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "docker rm $(docker ps -a -q)"
      ]
    },
    {
      "label": "docker remove ALL images",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "for img in $(docker image ls | awk '\"'\"'{ print $3 }'\"'\"' ) ; do docker image rm $img ; done"
      ]
    },
    {
      "label": "Kill all running Docker containers",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "docker kill $(docker ps -q)"
      ]
    },
    {
      "label": "upload .zip to S3://src-bucket-1234",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "aws s3 cp cmake-build-debug/pkg/${input:pickArtifact}.zip s3://src-bucket-1234/${input:pickArtifact}.zip"
      ]
    },
    {
      "label": "Start local minio instance",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "~/Documents/skyrise-operators/resources/minio/data:/data",
        "localminio"
      ],
      "dependsOn": "Build local minio instance if not present"
    },
    {
      "label": "Build local minio instance if not present",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "\"if [ -z \\\"$(docker image ls | grep localminio)\\\" ] ; then echo \\\"building missing image localminio\\\" && echo -e \\\"Starting minio client\\nThe exposed port can be found in the Dockerfile of the localminio image instance (default 9000)\\nExposed Buckets are listed in skyrise-operators/resources/minio/data\\n\\\" && cd ~/Documents/skyrise-operators/resources/minio && docker build -t localminio .; else echo \\\"image localminio already present\\\" ; fi\""
      ]
    },
    {
      "label": "Build local minio",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "cd ~/Documents/skyrise-operators/resources/minio && docker build -t localminio ."
      ]
    },
    {
      "label": "remove result files",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "\"for file in $(ls minio/data/results/ | grep -v \\\"readme.txt\\\" ); do rm -f \\\"minio/data/results/$(file)\\\" ; done\""
      ]
    },
    {
      "label": "cmake + make all",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "${workspaceFolder}:/tmp",
        "skyrise-build",
        "/bin/bash",
        "-c",
        "\"cd /tmp/cmake-build-debug && time make all\""
      ],
      "dependsOn": "cmake"
    },
    {
      "label": "cmake",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "${workspaceFolder}:/tmp",
        "skyrise-build",
        "/bin/bash",
        "-c",
        "\"cd /tmp/cmake-build-debug && cmake .. -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_BUILD_TYPE=Debug\""
      ],
      "dependsOn": "create build container if not present"
    },
    {
      "label": "find sources and headers",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "\"find ${workspaceFolder}/src -name \"*.*pp\" | sort | tr '\\n' ' ' | sed \"s@/home/Jan.Mensch/Documents/skyrise-operators@/tmp@g\" > lint_files.txt\""
      ],
      "dependsOn": "create build container if not present"
    },
    {
      "label": "make target",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "${workspaceFolder}:/tmp",
        "skyrise-build",
        "/bin/bash",
        "-c",
        "\"cd /tmp/cmake-build-debug && time make ${input:pickTarget}\""
      ],
      "problemMatcher": [
        "$eslint-compact"
      ]
    },
    {
      "label": "clang format all",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "${workspaceFolder}:/tmp",
        "skyrise-build",
        "/bin/bash",
        "-c",
        "cd /tmp/scripts && chmod +x format.sh && cd /tmp/ && ./scripts/format.sh all && echo \"format done\""
      ]
    },
    {
      "label": "cpplint",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "${workspaceFolder}:/tmp",
        "skyrise-build",
        "/bin/bash",
        "-c",
        "cd /tmp/scripts && chmod +x lint.sh && cd /tmp/ && ./scripts/lint.sh all && echo \"lint done\""
      ]
    },
    {
      "label": "clang tidy",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "${workspaceFolder}:/tmp",
        "-e",
        "SKYRISE_SCR=/tmp/src",
        "-e",
        "SKYRISE_FIX=false",
        "skyrise-build",
        "/bin/bash",
        "-c",
        "cd /tmp/scripts && chmod +x clang_tidy_wrapper.sh && cd /tmp/ && ./scripts/clang_tidy_wrapper.sh && echo \"tidy done\""
      ]
    },
    {
      "label": "clang tidy fix",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "${workspaceFolder}:/tmp",
        "-e",
        "SKYRISE_SCR=/tmp/src",
        "-e",
        "SKYRISE_FIX=true",
        "skyrise-build",
        "/bin/bash",
        "-c",
        "cd /tmp/scripts && chmod +x clang_tidy_wrapper.sh && cd /tmp/ && ./scripts/clang_tidy_wrapper.sh && echo \"tidy done\""
      ]
    },
    {
      "label": "run debug container networkBench",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "-e",
        "AWS_LAMBDA_EVENT_BODY='{\"durationSec\": 60, \"bucket\": \"develop\", \"key\": \"KiB1\",\"requestType\": \"GET\",\"isDryRun\": false,\"lambdaSizeMB\": 3008,\"storageSystem\": \"S3\",\"readMitigation\": -1,\"endpoint\": \"192.168.97.3:9000\",\"writeMitigation\": -1,\"intraFunctionParallelism\": 2,\"doubleWrite\": false}'",
        "-e",
        "AWS_ACCESS_KEY_ID=\"minio\"",
        "-e",
        "AWS_SECRET_ACCESS_KEY=\"miniostorage\"",
        "-e",
        "SKYRISE_DEBUG=${input:bool}",
        "-e",
        "SKYRISE_DEBUG_IP=\"192.168.97.3\"",
        "-e",
        "SKYRISE_ARTIFACT=skyriseNetworkBenchmark",
        "--privileged",
        "--cap-add=SYS_PTRACE",
        "--security-opt",
        "seccomp=unconfined",
        "--rm",
        "-v",
        "${workspaceFolder}/cmake-build-debug/bin:/var/task/bin/",
        "-v",
        "${workspaceFolder}/cmake-build-debug/lib:/tmp/cmake-build-debug/lib",
        "skyrise-run"
      ],
      "dependsOn": "create debug container if not present"
    },
    {
      "label": "run debug container Gtests",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-it",
        "-v",
        "${workspaceFolder}:/tmp",
        "-v",
        "${workspaceFolder}/cmake-build-debug/bin:/var/task/bin/",
        "-v",
        "${workspaceFolder}/cmake-build-debug/lib:/tmp/cmake-build-debug/lib",
        "skyrise-build",
        "/bin/bash"
      ],
      "dependsOn": "create debug container if not present"
    },
    {
      "label": "run debug container scan",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "-e",
        "AWS_LAMBDA_EVENT_BODY='{ \"s3Bucket\": \"develop\", \"s3Key\": \"lineitem_50k.csv\", \"endpoint\": \"192.168.97.3:9000\"}'",
        "-e",
        "AWS_ACCESS_KEY_ID=\"minio\"",
        "-e",
        "AWS_SECRET_ACCESS_KEY=\"miniostorage\"",
        "-e",
        "SKYRISE_ARTIFACT=scanOperator",
        "-e",
        "SKYRISE_DEBUG=${input:bool}",
        "-e",
        "SKYRISE_DEBUG_IP=\"192.168.97.3\"",
        "--privileged",
        "--cap-add=SYS_PTRACE",
        "--security-opt",
        "seccomp=unconfined",
        "--rm",
        "-v",
        "${workspaceFolder}/cmake-build-debug/bin:/var/task/bin/",
        "-v",
        "${workspaceFolder}/cmake-build-debug/lib:/tmp/cmake-build-debug/lib",
        "skyrise-run"
      ],
      "dependsOn": "create debug container if not present"
    },
    {
      "label": "create build container if not present",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "\"if [ -z \\\"$(docker image ls | grep skyrise-build)\\\" ] ; then echo \\\"building missing image skyrise-build\\\" && cd ${workspaceFolder} && docker build -t skyrise-build --target skyrise-build -f ${workspaceFolder}/Dockerfile .; else echo \\\"image skyrise-build already present\\\" ; fi\""
      ]
    },
    {
      "label": "create build container",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "cd ${workspaceFolder} && docker build -t skyrise-build --target skyrise-build -f ${workspaceFolder}/Dockerfile ."
      ]
    },
    {
      "label": "create debug container if not present",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "\"if [ -z \\\"$(docker image ls | grep skyrise-run)\\\" ] ; then echo \\\"building missing image skyrise-run\\\" && cd ${workspaceFolder} && docker build -t skyrise-run -f ${workspaceFolder}/Dockerfile .; else echo \\\"image skyrise-run already present\\\" ; fi\""
      ]
    },
    {
      "label": "create debug container",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "\"cd ${workspaceFolder} && docker build -t skyrise-run -f ${workspaceFolder}/Dockerfile .\""
      ]
    }
  ],
  "inputs": [
    {
      "type": "pickString",
      "id": "pickArtifact",
      "description": "The artifact to execute",
      "options": [
        "benchmarkDriver",
        "scanOperator",
        "skyriseNetworkBenchmark",
        "skyriseS3Benchmark"
      ]
    },
    {
      "type": "pickString",
      "id": "pickTarget",
      "description": "The artifact to execute",
      "options": [
        "all",
        "aws-lambda-package-benchmarkDriver",
        "aws-lambda-package-scanOperator",
        "aws-lambda-package-skyriseNetworkBenchmark",
        "aws-lambda-package-skyriseS3Benchmark",
        "benchmarkDriver",
        "scanOperator",
        "helpers_lib",
        "GTests",
        "skyriseMicroBenchmarks"
      ]
    },
    {
      "type": "pickString",
      "id": "bool",
      "description": "pick a boolean value",
      "options": [
        "true",
        "false"
      ]
    }
  ]
}