{
  "version": "2.0.0",
  "tasks": [
    {
      // python3 script/run_clang_format.py --clang_format_binary clang-format --source_dir src --fix
      "label": "clang-format --fix",
      "type": "shell",
      "command": "python3",
      "args": [
        "script/run_clang_format.py",
        "--clang_format_binary",
        "clang-format",
        "--source_dir",
        "src",
        "--fix"
      ]
    },
    {
      "label": "git: get/update all submodules",
      "type": "shell",
      "command": "git",
      "args": ["submodule", "update", "--init", "--recursive"]
    },
    {
      "label": "DOCKER remove all UNTAGGED images",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "for img in $(docker image ls | grep \"<none>\" | awk '\"'\"'{ print $3 }'\"'\"' ) ; do docker image rm -f $img ; done"
      ]
    },
    {
      "label": "DOCKER remove all DANGLING images",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "docker rmi $(docker images -f \"dangling=true\" -q)"]
    },
    {
      "label": "DOCKER remove all STOPPED containers",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "docker rm $(docker ps -a -q)"]
    },
    {
      "label": "DOCKER KILL all running containers",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "docker kill $(docker ps -q)"]
    },
    {
      "label": "cmake + ninja target",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "./script/docker/build_project.sh --verbose --build-type ${input:buildtype} --cmake \"-DPACKAGER_NO_LIBC=ON -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DSKYRISE_ENABLE_CLANG_TIDY=OFF -DSKYRISE_ENABLE_CPPCHECK=OFF -DSKYRISE_ENABLE_CPPLINT=OFF -DSKYRISE_ENABLE_CLANG_FORMAT=OFF\" --make-target ${input:pickTargetOrArtivact}"
      ]
    },
    {
      "label": "cmake + ninja target + clang-tidy",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "./script/docker/build_project.sh --verbose --build-type ${input:buildtype} --cmake \"-DPACKAGER_NO_LIBC=ON -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DSKYRISE_ENABLE_CLANG_TIDY=ON -DSKYRISE_ENABLE_CPPCHECK=OFF -DSKYRISE_ENABLE_CPPLINT=OFF -DSKYRISE_ENABLE_CLANG_FORMAT=OFF\" --make-target ${input:pickTargetOrArtivact}"
      ]
    },
    {
      "label": "clang-tidy --fix",
      "type": "shell",
      "command": "python3",
      "args": [
        "./script/run_clang_format.py",
        "--clang_format_binary",
        "clang-format",
        "--source_dir",
        "src",
        "--fix"
      ]
    },
    {
      "label": "cmake + ninja target + clang-tidy + clang-format",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "./script/docker/build_project.sh --verbose --build-type ${input:buildtype} --cmake \"-DPACKAGER_NO_LIBC=ON -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DSKYRISE_ENABLE_CLANG_TIDY=ON -DSKYRISE_ENABLE_CPPCHECK=OFF -DSKYRISE_ENABLE_CPPLINT=OFF -DSKYRISE_ENABLE_CLANG_FORMAT=ON\" --make-target ${input:pickTargetOrArtivact}"
      ]
    },
    {
      "label": "cmake + ninja target + clang-tidy + clang-format + cpplint",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "./script/docker/build_project.sh --verbose --build-type ${input:buildtype} --cmake \"-DPACKAGER_NO_LIBC=ON -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DSKYRISE_ENABLE_CLANG_TIDY=ON -DSKYRISE_ENABLE_CPPCHECK=ON -DSKYRISE_ENABLE_CPPLINT=ON -DSKYRISE_ENABLE_CLANG_FORMAT=ON\" --make-target ${input:pickTargetOrArtivact}"
      ]
    },
    {
      "label": "run skyriseTest",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-e",
        "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/tmp/cmake-build-debug/lib:/tmp/cmake-build-debug/lib/lib64",
        "-v",
        "${workspaceFolder}:/tmp",
        "-v",
        "${workspaceFolder}/cmake-build-debug/bin:/var/task/bin/",
        "-v",
        "${workspaceFolder}/cmake-build-debug/lib:/tmp/cmake-build-debug/lib", // usr/lib64
        "$USER/skyrise:build",
        "/bin/bash",
        "-c",
        "cd /var/task/bin/ && ./skyriseTest --gtest_filter=${input:testString} --gmock_verbose=info --gtest_stack_trace_depth=100"
      ]
    },
    {
      "label": "run skyriseTest",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-e",
        "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/tmp/cmake-build-debug/lib:/tmp/cmake-build-debug/lib/lib64",
        "-v",
        "${workspaceFolder}:/tmp",
        "-v",
        "${workspaceFolder}/cmake-build-debug/bin:/var/task/bin/",
        "-v",
        "${workspaceFolder}/cmake-build-debug/lib:/tmp/cmake-build-debug/lib", // usr/lib64
        "$USER/skyrise:build",
        "/bin/bash",
        "-c",
        "cd /var/task/bin/ && ./skyriseTest --gtest_filter=${input:testString} --gmock_verbose=info --gtest_stack_trace_depth=100"
      ]
    },
    {
      "label": "list all available tests in skyriseTest",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-e",
        "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/tmp/cmake-build-debug/lib:/tmp/cmake-build-debug/lib/lib64",
        "-v",
        "${workspaceFolder}:/tmp",
        "-v",
        "${workspaceFolder}/cmake-build-debug/bin:/var/task/bin/",
        "-v",
        "${workspaceFolder}/cmake-build-debug/lib:/tmp/cmake-build-debug/lib", // usr/lib64
        "$USER/skyrise:build",
        "/bin/bash",
        "-c",
        "cd /var/task/bin/ && ./skyriseTest --gtest_list_tests"
      ]
    },
    {
      "label": "launch skyrise:run without artifact",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--entrypoint",
        "\"\"",
        "-w",
        "/var/task/bin",
        "-it",
        "-p",
        "1234:1234",
        "-e",
        "AWS_ACCESS_KEY_ID=\"minio\"",
        "-e",
        "AWS_SECRET_ACCESS_KEY=\"miniostorage\"",
        "-e",
        "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/tmp/cmake-build-debug/lib:/tmp/cmake-build-debug/lib/lib64",
        "--privileged",
        "--cap-add=SYS_PTRACE",
        "--security-opt",
        "seccomp=unconfined",
        "--rm",
        "-v",
        "${workspaceFolder}/cmake-build-debug/bin:/var/task/bin/",
        "-v",
        "${workspaceFolder}/cmake-build-debug/lib:/tmp/cmake-build-debug/lib",
        "$USER/skyrise:run",
        "/bin/bash"
      ],
      "dependsOn": "DOCKER create containers"
    },
    {
      "label": "DOCKER create containers",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "cd ${workspaceFolder} && ./script/docker/build_images.sh --prune"
      ]
    },
    {
      "label": "create containers in background",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "cd ${workspaceFolder} && ./script/docker/build_images.sh --prune & disown"
      ]
    },
    {
      "label": "list all available cmake targets",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "cd ${workspaceFolder}/cmake-build-debug && ninja help"]
    },
    {
      "label": "list all local executables",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "for bin in $(ls ${workspaceFolder}/cmake-build-debug/bin | sort) ; do echo $bin ; done"
      ]
    }
  ],
  "inputs": [
    {
      "type": "pickString",
      "id": "testString",
      "description": "the test suit that will be executed. Will be passed to gtest -gtest_filter",
      "options": [
        "*",
        "CostCalculatorTest*",
        "FunctionHostInformationTest*",
        "Is*Test*",
        "IsIntegralTest*",
        "IsOptionalTest*",
        "IsSmartPointerTest*",
        "IsVectorTest*",
        "JsonSerializerTest*",
        "PricingTest*",
        "SmartPtrFixture*"
      ]
    },
    {
      "type": "pickString",
      "id": "buildtype",
      "description": "The build type used by cmake",
      "options": ["Debug", "Release"]
    },
    {
      "type": "pickString",
      "id": "pickTargetOrArtivact",
      "description": "The artifact to build/execute",
      "options": [
        "all",
        "aws-cpp-sdk-access-management",
        "aws-cpp-sdk-cognito-identity",
        "aws-cpp-sdk-core",
        "aws-cpp-sdk-iam",
        "aws-cpp-sdk-kinesis",
        "aws-cpp-sdk-lambda",
        "aws-cpp-sdk-monitoring",
        "aws-cpp-sdk-pricing",
        "aws-cpp-sdk-s3",
        "aws-cpp-sdk-sqs",
        "aws-cpp-sdk-xray",
        "aws-lambda-package-skyriseFunctionMinimal",
        "aws-lambda-runtime",
        "clang-format-edit",
        "clean",
        "depend",
        "edit_cache",
        "gmock_main",
        "gmock",
        "gtest_main",
        "gtest",
        "install",
        "install/local",
        "install/strip",
        "list_install_components",
        "lz4_ep",
        "orc",
        "package_source",
        "package",
        "protobuf_ep",
        "queryJsonGen",
        "rebuild_cache",
        "simpleBenchmark",
        "skyrise",
        "skyriseBenchmark",
        "skyriseBenchmarkConsole",
        "skyriseConsole",
        "skyriseCoordinatorLib",
        "skyriseFunctionMinimal",
        "skyriseTest",
        "skyriseWorker",
        "snappy_ep",
        "tpch-dbgen",
        "uninstall",
        "zlib_ep",
        "zstd_ep"
      ]
    }
  ]
}
