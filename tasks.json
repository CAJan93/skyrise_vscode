{
  "version": "2.0.0",
  "tasks": [
    {
      // remove all docker images that have a tage called "<none>"
      "label": "docker remove all UNTAGGED images",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "for img in $(docker image ls | grep \"<none>\" | awk '\"'\"'{ print $3 }'\"'\"' ) ; do docker image rm $img ; done"
      ]
    },
    {
      "label": "docker remove all STOPPED containers",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "docker rm $(docker ps -a -q)"
      ]
    },
    {
      "label": "check pragma once in all src/",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "docker rm $(docker ps -a -q)"
      ]
    },
    {
      // remove all docker images
      "label": "docker remove ALL images",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "for img in $(docker image ls | awk '\"'\"'{ print $3 }'\"'\"' ) ; do docker image rm $img ; done"
      ]
    },
    {
      // abruptly stop all running containers
      "label": "Kill all running Docker containers",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "docker kill $(docker ps -q)"
      ]
    },
    {
      "label": "upload .zip to S3://benchmark-source-bucket",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "aws s3 cp cmake-build-debug/pkg/${input:pickArtifact}.zip s3://benchmark-source-bucket/${input:pickArtifact}.zip"
      ]
    },
    {
      // start an instance of minio
      "label": "Start local minio instance",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "~/Documents/skyrise-operators/minio/data:/data",
        "localminio"
      ],
      "dependsOn": "Build local minio instance if not present"
    },
    {
      // build minio from a Dockerfile, if not present
      "label": "Build local minio instance if not present",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "\"if [ -z \\\"$(docker image ls | grep localminio)\\\" ] ; then echo \\\"building missing image localminio\\\" && echo -e \\\"Starting minio client\\nThe exposed port can be found in the Dockerfile of the localminio image instance (default 9000)\\nExposed Buckets are listed in skyrise-operators/minio/data\\n\\\" && cd ~/Documents/skyrise-operators/minio && docker build -t localminio .; else echo \\\"image localminio already present\\\" ; fi\""
      ]
    },
    {
      // build/update minio from a Dockerfile
      "label": "Build local minio",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "cd ~/Documents/skyrise-operators/minio && docker build -t localminio ."
      ]
    },
    {
      "label": "remove result files",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "\"for file in $(ls minio/data/results/ | grep -v \\\"readme.txt\\\" ); do rm -f \\\"minio/data/results/$(file)\\\" ; done\""
      ]
    },
    {
      "label": "cmake",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "${workspaceFolder}:/tmp",
        "skyrise-build",
        "/bin/bash",
        "-c",
        "\"cd /tmp/cmake-build-debug && cmake .. -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_BUILD_TYPE=Debug\""
      ],
      "dependsOn": "create build container if not present"
    },
    {
      "label": "cpplint current file (cppcheck)",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "${workspaceFolder}:/tmp",
        "skyrise-build",
        "/bin/bash",
        "-c",
        "\"python /opt/cppcheck-1.90/cpplint.py --headers=hpp --extensions=hpp,cpp /tmp/${relativeFile}\""
      ],
      "dependsOn": "create build container if not present"
    },
    {
      "label": "cpplint src dir (cppcheck)",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "${workspaceFolder}:/tmp",
        "skyrise-build",
        "/bin/bash",
        "-c",
        "\"python /opt/cppcheck-1.90/cpplint.py --headers=hpp --extensions=hpp,cpp $(cat lint_files.txt)\""
      ],
      "dependsOn": "find sources and headers"
    },
    {
      "label": "find sources and headers",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "\"find ${workspaceFolder}/src -name \"*.*pp\" | sort | tr '\\n' ' ' | sed \"s@/home/Jan.Mensch/Documents/skyrise-operators@/tmp@g\" > lint_files.txt\""
      ],
      "dependsOn": "create build container if not present"
    },
    {
      "label": "make target",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-v",
        "${workspaceFolder}:/tmp",
        "skyrise-build",
        "/bin/bash",
        "-c",
        "\"cd /tmp/cmake-build-debug && time make ${input:pickTarget}\""
      ]
    },
    {
      // run an artifact that is specified by the user inside the debug container
      // use 192.168.97.2:9000 if minio starts first and 192.168.97.3:9000 if skyrise-run starts first
      "label": "run debug container networkBench",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "-e",
        "AWS_LAMBDA_EVENT_BODY='{\"testDurationSec\": 60, \"s3Bucket\": \"develop\", \"s3Key\": \"KiB1\",\"requestType\": \"GET\",\"isDryRun\": false,\"lambdaSize\": 3008,\"storageName\": \"S3\",\"readMitigation\": -1,\"Endpoint\": \"192.168.97.3:9000\",\"writeMitigation\": -1,\"nrConcurrentRequests\": 2,\"doubleWrite\": false,\"csvHasHeader\": true}'",
        "-e",
        "AWS_ACCESS_KEY_ID=\"minio\"",
        "-e",
        "AWS_SECRET_ACCESS_KEY=\"miniostorage\"",
        "-e",
        "SKYRISE_DEBUG=${input:bool}",
        "-e",
        "SKYRISE_DEBUG_IP=\"192.168.97.3\"",
        "-e",
        "SKYRISE_ARTIFACT=skyriseNetworkBenchmark",
        "--privileged",
        "--cap-add=SYS_PTRACE",
        "--security-opt",
        "seccomp=unconfined",
        "--rm",
        "-v",
        "${workspaceFolder}/cmake-build-debug/bin:/var/task/bin/",
        "-v",
        "${workspaceFolder}/cmake-build-debug/lib:/tmp/cmake-build-debug/lib", // or use usr/local/lib64?
        "skyrise-run"
      ],
      "dependsOn": "create debug container if not present"
    },
    {
      // run an artifact that is specified by the user inside the debug container
      // use 192.168.97.2:9000 if minio starts first and 192.168.97.3:9000 if skyrise-run starts first
      "label": "run debug container Gtests",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-it",
        "-v",
        "${workspaceFolder}:/tmp",
        "-v",
        "${workspaceFolder}/cmake-build-debug/bin:/var/task/bin/",
        "-v",
        "${workspaceFolder}/cmake-build-debug/lib:/tmp/cmake-build-debug/lib", // or use usr/local/lib64?
        "skyrise-build",
        "/bin/bash"
      ],
      "dependsOn": "create debug container if not present"
    },
    {
      // run an artifact that is specified by the user inside the debug container
      // use 192.168.97.2:9000 if minio starts first and 192.168.97.3:9000 if skyrise-run starts first
      "label": "run debug container scan",
      "type": "shell",
      "command": "docker",
      "args": [
        "run",
        "-e",
        "AWS_LAMBDA_EVENT_BODY='{ \"s3Bucket\": \"develop,develop,develop,test\", \"s3Key\": \"doc1,doc2,doc3,doc4\", \"Endpoint\": \"192.168.97.3:9000\"}'",
        "-e",
        "AWS_ACCESS_KEY_ID=\"minio\"",
        "-e",
        "AWS_SECRET_ACCESS_KEY=\"miniostorage\"",
        "-e",
        "SKYRISE_ARTIFACT=scanOperator",
        "-e",
        "SKYRISE_DEBUG=${input:bool}",
        "-e",
        "SKYRISE_DEBUG_IP=\"192.168.97.3\"",
        "--privileged",
        "--cap-add=SYS_PTRACE",
        "--security-opt",
        "seccomp=unconfined",
        "--rm",
        "-v",
        "${workspaceFolder}/cmake-build-debug/bin:/var/task/bin/",
        "-v",
        "${workspaceFolder}/cmake-build-debug/lib:/tmp/cmake-build-debug/lib", // alternative: use usr/local/lib64
        "skyrise-run"
      ],
      "dependsOn": "create debug container if not present"
    },
    {
      // check if skyrise-build exists, if not build it
      "label": "create build container if not present",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "\"if [ -z \\\"$(docker image ls | grep skyrise-build)\\\" ] ; then echo \\\"building missing image skyrise-build\\\" && cd ${workspaceFolder}/third_party && docker build -t skyrise-build --target skyrise-build -f ${workspaceFolder}/Dockerfile .; else echo \\\"image skyrise-build already present\\\" ; fi\""
      ]
    },
    {
      // build/update skyrise-build exists
      "label": "create build container",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "cd ${workspaceFolder}/third_party && docker build -t skyrise-build --target skyrise-build -f ${workspaceFolder}/Dockerfile ."
      ]
    },
    {
      // check if skyrise-run exists, if not build it. Container skyrise-run is used for creating debug builds, not for running them.
      "label": "create debug container if not present",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "\"if [ -z \\\"$(docker image ls | grep skyrise-run)\\\" ] ; then echo \\\"building missing image skyrise-run\\\" && cd ${workspaceFolder}/third_party && docker build -t skyrise-run -f ${workspaceFolder}/Dockerfile .; else echo \\\"image skyrise-run already present\\\" ; fi\""
      ]
    },
    {
      // Build/update the skyrise-run
      "label": "create debug container",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "\"cd ${workspaceFolder}/third_party && docker build -t skyrise-run -f ${workspaceFolder}/Dockerfile .\""
      ]
    }
  ],
  "inputs": [
    {
      "type": "pickString",
      "id": "pickArtifact",
      "description": "The artifact to execute",
      "options": [
        "benchmarkDriver",
        "scanOperator",
        "skyriseNetworkBenchmark",
        "skyriseS3Benchmark"
      ]
    },
    {
      "type": "pickString",
      "id": "pickTarget",
      "description": "The artifact to execute",
      "options": [
        "all",
        "aws-lambda-package-benchmarkDriver",
        "aws-lambda-package-scanOperator",
        "aws-lambda-package-skyriseNetworkBenchmark",
        "aws-lambda-package-skyriseS3Benchmark",
        "benchmarkDriver",
        "scanOperator",
        "skyriseNetworkBenchmark",
        "skyriseS3Benchmark",
        "helpers_lib",
        "GTests",
        "skyriseMicroBenchmarks"
      ]
    },
    {
      "type": "pickString",
      "id": "bool",
      "description": "pick a boolean value",
      "options": [
        "true",
        "false"
      ]
    }
  ]
}